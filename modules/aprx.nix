{ config, lib, pkgs, utils, ... }:

with lib;

let
  cfg = config.services.aprx;
  aprxPkg = config.services.aprx.package;

  confFile = if cfg.configFile != null then cfg.configFile
    else pkgs.writeText "aprxd.conf"
    ''
      mycall ${cfg.callSign}
      <interface>
        ax25-device $mycall
        tx-ok ${toString cfg.txOk}
      </interface>
      <digipeater>
        transmitter $mycall
        <source>
          source $mycall
        </source>
      </digipeater>
    '';
in
{
  options = {

    services.aprx = {

      enable = mkEnableOption (lib.mdDoc "aprx server");

      package = mkOption {
        type = types.package;
        default = pkgs.aprx;
        defaultText = literalExpression "pkgs.aprx";
        description = lib.mdDoc "The aprx package to use";
      };

    callSign = mkOption {
      type = types.str;
      default = "NOCALL";
      description = lib.mdDoc "Amatuer Radio Callsign";
    };

    device = mkOption {
      type = types.path;
      default = /dev/ttyS0;
      description = lib.mdDoc "TNC device";
    };

    baud = mkOption {
      default = "57600";
      type = types.enum [ "1200" "9600" "57600" ];
      description = lib.mdDoc "Baud rate to the TNC";
    };

    txOk = mkOption {
      type = types.bool;
      default = true;
      description = lib.mdDoc "enable TX for digipeater";
    };

    configFile = mkOption {
      type = types.nullOr types.path;
      default = null;
      description = lib.mdDoc ''
        Overridable config file to use for named. By default, that
        generated by nixos.
      '';
    };
  };
  };

  config = mkIf cfg.enable {

    environment.etc."aprx/aprxd.conf".source = confFile;

    systemd.services.aprx =
      {
        description = "Amateur Radio APRS Gateway & Digipeater";
        wantedBy = [ "multi-user.target" ];
        serviceConfig = {
          Type = "simple";
          ExecStart = "${aprxPkg}/bin/aprx -i -f /etc/aprx/aprxd.conf";
        };
      };
  };
}
